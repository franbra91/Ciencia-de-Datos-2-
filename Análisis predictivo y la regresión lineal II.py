# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rNfc-Jay0AL8v-Gu-m4sBmtk2qncqOXl
"""

import pandas as pd

# URL del dataset
url = "https://raw.githubusercontent.com/lab-ml-itba/Regresion-Lineal/master/alturas-pesos.csv"

# Cargar el archivo CSV en un DataFrame
df = pd.read_csv(url)

# Mostrar las primeras filas del DataFrame
print(df.head())

# Mostrar el tamaño del DataFrame (filas, columnas)
print("Tamaño del DataFrame:", df.shape)

import statsmodels.api as sm

# Definir variables
X = df["Altura"]  # Variable independiente
y = df["Peso"]    # Variable dependiente

# Agregar una constante para el término de intercepción
X = sm.add_constant(X)

# Ajustar el modelo
modelo_stats = sm.OLS(y, X).fit()

# Mostrar el resumen del modelo
print(modelo_stats.summary())

from sklearn.linear_model import LinearRegression

# Redimensionar X para sklearn
X_sklearn = df["Altura"].values.reshape(-1, 1)
y_sklearn = df["Peso"].values

# Crear y entrenar el modelo
modelo_sklearn = LinearRegression()
modelo_sklearn.fit(X_sklearn, y_sklearn)

# Obtener coeficientes
print("Coeficiente:", modelo_sklearn.coef_[0])
print("Intercepto:", modelo_sklearn.intercept_)
print("Score R²:", modelo_sklearn.score(X_sklearn, y_sklearn))

Diferencias clave entre Statsmodels y Scikit-Learn:
- Statsmodels ofrece un análisis más detallado con estadísticas como valores p y intervalos de confianza.
- Scikit-learn es más eficiente para predicciones y escalabilidad en aplicaciones de machine learning.
- Ambos modelos deben tener resultados similares en coeficientes e intercepto, pero statsmodels es mejor para interpretar y validar hipótesis, mientras que scikit-learn es ideal para implementación práctica.

